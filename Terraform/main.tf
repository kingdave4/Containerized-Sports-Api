# ECS Cluster Configuration
# This block creates an ECS cluster named "sports-api-cluster" to manage containers.
resource "aws_ecs_cluster" "sports_api_cluster" {
  name = "sports-api-cluster"
}

# ECS Task Definition
# Defines how the containerized application will run, including memory, CPU, container image, ports, and environment variables.
resource "aws_ecs_task_definition" "sports_api_task" {
  family                   = "sports-api-task"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"  # Specifies the CPU units allocated to the task
  memory                   = "512"  # Specifies the memory allocated to the task

  # Container configuration, including image and port mappings
  container_definitions = jsonencode([
    {
      name      = "sports-api-container",
      image     = "636772248290.dkr.ecr.us-east-1.amazonaws.com/sports-api:sports-api-latest",
      cpu       = 256,
      memory    = 512,
      portMappings = [
        {
          containerPort = 8080,
          hostPort      = 8080,
          protocol      = "tcp"
        }
      ],
      environment = [
        {
          name  = "SPORTS_API_KEY",
          value = var.sports_api_key # Environment variable for API key
        }
      ],
      logConfiguration = {
        logDriver = "awslogs",
        options = {
          "awslogs-group"         = "/ecs/sports-api",
          "awslogs-region"        = "us-east-1",
          "awslogs-stream-prefix" = "ecs"
        }
      }
    }
  ])

  execution_role_arn = aws_iam_role.ecs_task_execution_role.arn # IAM role for task execution
  task_role_arn      = aws_iam_role.ecs_task_execution_role.arn

  depends_on = [aws_cloudwatch_log_group.sports_api_log_group] # Ensures logs are set up before the task
}

# CloudWatch Log Group
# Creates a log group to store logs generated by the ECS tasks.
resource "aws_cloudwatch_log_group" "sports_api_log_group" {
  name              = "/ecs/sports-api"
  retention_in_days = 7 # Retain logs for 7 days
}

# IAM Role for ECS Task Execution
# Allows ECS tasks to interact with AWS services like CloudWatch, ECR, and others.
resource "aws_iam_role" "ecs_task_execution_role" {
  name = "ecs_task_execution_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Attaches the AmazonECSTaskExecutionRolePolicy to the IAM role for necessary permissions.
resource "aws_iam_role_policy_attachment" "ecs_task_execution_policy" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Security Group for ECS Tasks
# Defines ingress and egress rules for network traffic.
resource "aws_security_group" "sports_api_sg" {
  name_prefix = "sports-api-sg-"

  ingress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Allows all inbound traffic (not recommended for production)
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"] # Allows all outbound traffic
  }
}

# ECS Service
# Runs and manages the ECS task definition as a service.
resource "aws_ecs_service" "sports_api_service" {
  name            = "sports-api-service"
  cluster         = aws_ecs_cluster.sports_api_cluster.id
  task_definition = aws_ecs_task_definition.sports_api_task.arn
  desired_count   = 2 # Number of tasks to run
  launch_type     = "FARGATE"

  # Network configuration for the Fargate tasks
  network_configuration {
    subnets         = ["subnet-0d920f5fb42b15f2e", "subnet-0190b3cb4ce0c2b0d", "subnet-01087b07816558e62"]
    security_groups = [aws_security_group.sports_api_sg.id]
    assign_public_ip = true # Assigns public IP to tasks
  }

  # Links the ECS service with a load balancer
  load_balancer {
    target_group_arn = aws_lb_target_group.sports_api_target_group.arn
    container_name   = "sports-api-container"
    container_port   = 8080
  }
}

# Application Load Balancer
# Routes incoming traffic to ECS tasks.
resource "aws_lb" "sports_api_alb" {
  name               = "sports-api-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.sports_api_sg.id]
  subnets            = ["subnet-0d920f5fb42b15f2e", "subnet-0190b3cb4ce0c2b0d", "subnet-01087b07816558e62"]
}

# Target Group for Load Balancer
# Specifies how traffic is directed to the ECS tasks.
resource "aws_lb_target_group" "sports_api_target_group" {
  name        = "sports-api-target-group"
  port        = 8080
  protocol    = "HTTP"
  vpc_id      = "vpc-0f2e8009a174a7fc5"
  target_type = "ip"

  # Health check configuration for tasks
  health_check {
    path                = "/sports"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

# Listener for Load Balancer
# Listens for HTTP traffic on port 8080 and forwards it to the target group.
resource "aws_lb_listener" "sports_api_listener" {
  load_balancer_arn = aws_lb.sports_api_alb.arn
  port              = 8080
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.sports_api_target_group.arn
  }
}

# API Gateway
# Sets up an API Gateway for the application, acting as an entry point for external HTTP requests.
resource "aws_api_gateway_rest_api" "sports_api_gateway" {
  name = "Sports API Gateway"
}

# Defines the API resource path (e.g., /sports)
resource "aws_api_gateway_resource" "sports_resource" {
  rest_api_id = aws_api_gateway_rest_api.sports_api_gateway.id
  parent_id   = aws_api_gateway_rest_api.sports_api_gateway.root_resource_id
  path_part   = "sports"
}

# API Method
# Configures a GET method for the /sports resource.
resource "aws_api_gateway_method" "sports_method" {
  rest_api_id   = aws_api_gateway_rest_api.sports_api_gateway.id
  resource_id   = aws_api_gateway_resource.sports_resource.id
  http_method   = "GET"
  authorization = "NONE"
}

# API Gateway Integration
# Connects the API Gateway to the ECS service via the Application Load Balancer.
resource "aws_api_gateway_integration" "sports_integration" {
  rest_api_id             = aws_api_gateway_rest_api.sports_api_gateway.id
  resource_id             = aws_api_gateway_resource.sports_resource.id
  http_method             = aws_api_gateway_method.sports_method.http_method
  integration_http_method = "GET"
  type                    = "HTTP_PROXY"
  uri                     = "http://${aws_lb.sports_api_alb.dns_name}:8080/sports"
}

# Deployment for API Gateway
# Deploys the API Gateway to a production stage.
resource "aws_api_gateway_deployment" "sports_api_deployment" {
  depends_on = [
    aws_api_gateway_integration.sports_integration
  ]
  rest_api_id = aws_api_gateway_rest_api.sports_api_gateway.id
  stage_name  = "prod"
}
